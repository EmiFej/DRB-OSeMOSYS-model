# The workflow does the following:
# Reads in a .txt 
# Creates an LP file with GLPK
# Creates a .sol file with Gurobi
# Converts the .sol to .csv using Otoole

# Some useful snakemake commands:
# snakemake -n (Creates a dry run where one can see what the workflow intends to execute)
# snakemake --cores (specifies the number of CPU cores for the run)

scenarios = ['ref_low','ref_high','ag_low','ag_high','el_low','el_high']

rule all:
    input:
        expand('results/{scenario}/ProductionByTechnologyAnnual.csv', 
               scenario=scenarios)

rule create_lp:
    input:
        model='model_file/osemosys.txt',
        data_file='data/scenarios/{scenario}/{scenario}.txt'
    output:
        lp_file='lp_file/{scenario}/{scenario}.lp',
        glpsol_log='logs/glpsol_logs/{scenario}/glpsol_log_{scenario}.txt'
    log:
        'logs/{scenario}/create_lp.log'
    shell:
        '''
        mkdir -p {output.lp_file:dirname} {output.glpsol_log:dirname}
        glpsol --check -m {input.model} -d {input.data_file} \
               --wlp {output.lp_file} --log {output.glpsol_log} &> {log}
        ''' 

rule create_sol:
    input:
        rules.create_lp.output.lp_file
    output:
        solution_file='sol_file/{scenario}/{scenario}.sol',
    shell:
        'gurobi_cl ResultFile={output.solution_file} {input}'

rule otoole:
    input:
        solution_otoole_file= rules.create_sol.output.solution_file,
        txt_otoole_file= rules.create_lp.input.data_file
    params: 
        otoole_csv_folder= 'results/{scenario}'
    output:
        'results/{scenario}/ProductionByTechnologyAnnual.csv'
    shell:
        'otoole results gurobi csv {input.solution_otoole_file} {params.otoole_csv_folder} --input_datafile {input.txt_otoole_file}'
